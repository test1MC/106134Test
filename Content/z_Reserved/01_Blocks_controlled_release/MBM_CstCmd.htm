<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us" MadCap:lastBlockDepth="6" MadCap:lastHeight="3724" MadCap:lastWidth="1035" MadCap:fileTags="AuthorFileTags.CAREL INDUSTRIES&#160;SpA">
    <head>
        <link href="../../Resources/TableStyles/02_Custom.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/01_Technical_Features.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/03_Input_Output.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/03_Input_Output.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/04_Release_Notes.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/03_Input_Output.css" rel="stylesheet" MadCap:stylesheetType="table" />
        <link href="../../Resources/TableStyles/04_Release_Notes.css" rel="stylesheet" MadCap:stylesheetType="table" /><title></title>
        <link href="../../Resources/Stylesheets/styles.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <h4>MBM_CstCmd</h4>
        <p class="descriptionshort">Send and reads custom Modbus messages via serial channels</p>
        <p>
            <img src="../../Resources/Images/Reserved_CAREL_HQ/MBM_CstCmd/MBM_CstCmd.png" class="OneHundredPercentThumbnail" />
        </p>
        <h5 style="mc-locked: locked;">Technical features</h5>
        <table class="TableStyle-TechFeatures" style="margin-left: 0; margin-right: auto; width: 80%; mc-table-style: url('../../Resources/TableStyles/01_Technical_Features.css'); mc-table-style-original: url('../../Resources/TableStyles/01_Technical_Features.css');" cellspacing="0">
            <col class="TableStyle-TechFeatures-Column-Feature" />
            <col class="TableStyle-TechFeatures-Column-Value" />
            <col class="TableStyle-TechFeatures-Column-Notes" />
            <thead>
                <tr class="TableStyle-TechFeatures-Head-Header1">
                    <th class="TableStyle-TechFeatures-HeadE-Feature-Header1">Feature</th>
                    <th class="TableStyle-TechFeatures-HeadE-Value-Header1">Value</th>
                    <th class="TableStyle-TechFeatures-HeadD-Notes-Header1" style="mc-locked: locked;">Notes</th>
                </tr>
            </thead>
            <tbody>
                <tr style="height: 25pt;" class="TableStyle-TechFeatures-Body-Row1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Row1" style="mc-locked: locked;">Program Organization Unit type</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Row1">Function block </td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Row1">-</td>
                </tr>
                <tr style="height: 25pt;" class="TableStyle-TechFeatures-Body-Body1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Body1" style="mc-locked: locked;">c.suite version</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Body1">≥ 1.3.62</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Body1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Row1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Row1" style="mc-locked: locked;">Hardware</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Row1">c.pCO family</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Row1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Body1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Body1" style="mc-locked: locked;">O.S.</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Body1">≥ 1.3.000</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Body1">&#160;</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Row1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Row1" style="mc-locked: locked;">Compatibility with other F/FB</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Row1">-</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Row1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Body1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Body1" style="mc-locked: locked;">Compatible CAREL device P/Ns</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Body1">-</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Body1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Row1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Row1" style="mc-locked: locked;">Compatible CAREL device P/Ns</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Row1">-</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Row1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Body1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Body1" style="mc-locked: locked;">Device manual</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Body1">-</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Body1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Row1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Row1" style="mc-locked: locked;">Device firmware</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Row1">-</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Row1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Body1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Body1" style="mc-locked: locked;">Password</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Body1">-</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Body1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Row1">
                    <td class="TableStyle-TechFeatures-BodyE-Feature-Row1" style="mc-locked: locked;">Protocols</td>
                    <td class="TableStyle-TechFeatures-BodyE-Value-Row1">Modbus Master</td>
                    <td class="TableStyle-TechFeatures-BodyD-Notes-Row1">-</td>
                </tr>
                <tr class="TableStyle-TechFeatures-Body-Body1">
                    <td class="TableStyle-TechFeatures-BodyB-Feature-Body1" style="mc-locked: locked;">Footprint</td>
                    <td class="TableStyle-TechFeatures-BodyB-Value-Body1">
                        <p>-<br /></p>
                    </td>
                    <td class="TableStyle-TechFeatures-BodyA-Notes-Body1">-</td>
                </tr>
            </tbody>
        </table>
        <h5 style="mc-locked: locked;">General operations</h5>
        <p>MBM_CstCmd is used to send a custom stream of bytes from a serial port and read the response.</p>
        <p>This can be useful for sending user defined Modbus messages without restrictions.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: #bed230;&quot; class=&quot;mcFormatColor&quot;&gt;Note &lt;/span&gt;&lt;/b&gt;">All the data used by the function block must be variables declared as BYTE data types.</p>
        <p class="suggestion" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: Yellow;&quot; class=&quot;mcFormatColor&quot;&gt;Tip &lt;/span&gt;&lt;/b&gt;">Hexadecimal values can be assigned to BYTE&#160;variables by using the prefix <i>16#</i>.</p>
        <p class="warning" MadCap:autonum="&lt;b&gt;&lt;span style=&quot;color: Red;&quot; class=&quot;mcFormatColor&quot;&gt;Warning &lt;/span&gt;&lt;/b&gt;">To chane between a protocol configured via c.design and a custom protocol, the application or the c.pco needs to be restarted.</p>
        <h5>State machine overview</h5>
        <p>The function block manages interaction between the 3 FBs COM_CTRL, COM_WRITE&#160;and&#160;COM_READ with a cycle of operations - initialise the channel, send the message and read the response.</p>
        <p>Input pins are structured to match a Modbus message, thus in the following form:</p>
        <p>
            <img src="../../Resources/Images/Reserved_CAREL_HQ/MBM_CstCmd/MBM_CstCmd_modbus_message.png" class="OneHundredPercentThumbnail" />
        </p>
        <p><i>Address</i> identifies the network address of the slave device. This ranges from 1 to 247, while 0 is the broadcast address.</p>
        <p style="color: #bed230;"><i style="color: #000000;">Function Code</i><span style="color: #000000;"> is the request made to the slave devices. This can be a number between 1 and 127. For a full list of public supported FCs, see:</span> <a href="http://modbus.org/docs/Modbus_Application_Protocol_V1_1b3.pdf">http://modbus.org/docs/Modbus_Application_Protocol_V1_1b3.pdf</a></p>
        <p><i>Data</i> is the field containing the bytes related to the request, so the format depends on the function code. This can be up to 252 bytes long.</p>
        <p MadCap:conditions=""><i>CRC16</i> is calculated by the function block. It means <i>Cyclic Redundancy Check</i> and is an error detection code, calculated from the overall message.</p>
        <p MadCap:conditions="">The state machine can be summarised in the following flowchart:</p>
        <p>
            <img src="../../Resources/Images/Reserved_CAREL_HQ/MBM_CstCmd/MBM_CstCmd_StateMachine.png" class="OneHundredPercentThumbnail" />
        </p>
        <table style="mc-table-style: url('../../Resources/TableStyles/02_Custom.css'); margin-left: 0; margin-right: auto; width: 80%; mc-table-style-original: url('../../Resources/TableStyles/02_Custom.css');" class="TableStyle-02_Custom" cellspacing="0">
            <col class="TableStyle-02_Custom-Column-Default" style="width: 313px;" />
            <col class="TableStyle-02_Custom-Column-Default" />
            <thead>
                <tr class="TableStyle-02_Custom-Head-Header2">
                    <th class="TableStyle-02_Custom-HeadE-Default-Header2">State /Condition</th>
                    <th class="TableStyle-02_Custom-HeadD-Default-Header2">Description</th>
                </tr>
            </thead>
            <tbody>
                <tr class="TableStyle-02_Custom-Body-LightRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-LightRows">State 0 - <i>Idle State</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-LightRows">State 0 is an idle state in which the program waits for a trigger command. It is also the state the cycle returns to after an exception return</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-DarkerRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-DarkerRows">Condition 1 - <i>Send command trigger</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-DarkerRows">The first condition check occurs in idle state. When <i>En_Write</i> is trigged, the state becomes 1</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-LightRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-LightRows">State 1 - <i>Message buildup</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-LightRows">During this state, the code builds the packet to send over the serial line, assembling the components of the message. It also calls the functions to calculate the CRC code and adds this to the message</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-DarkerRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-DarkerRows">State 2 - <i>Send data</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-DarkerRows">With a cycle the program sends out the whole message, one byte at time, using the COM_WRITE&#160;function block. Then it jumps to state 2</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-LightRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-LightRows">State 3 - <i>Wait for answer</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-LightRows">This is a transitional state in which the application waits for the response, checking two conditions every cycle.</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-DarkerRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-DarkerRows">Condition 2 - <i>Timeout detection</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-DarkerRows">If no response is received within a specific time (3 seconds), a timeout check prevents it from staying stuck in the second state and returns to the idle state</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-LightRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-LightRows">Condition 3 - <i>Answer data ready</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-LightRows">On the other side is a check with a call to the COM_READ function block, to see if there is a response ready to be read. When this condition is true, the value read is copied to the response array (as otherwise it would be lost on the next call) and the application will move to state 4.</td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-DarkerRows">
                    <td class="TableStyle-02_Custom-BodyE-Default-DarkerRows">State 4 - <i>Read answer</i></td>
                    <td class="TableStyle-02_Custom-BodyD-Default-DarkerRows">
                        <p>While there is still some data remaining, the value read via the serial line is copied to the response array</p>
                    </td>
                </tr>
                <tr class="TableStyle-02_Custom-Body-LightRows">
                    <td class="TableStyle-02_Custom-BodyB-Default-LightRows">Condition&#160;4 - <i>No more data left</i></td>
                    <td class="TableStyle-02_Custom-BodyA-Default-LightRows">When the response has been completely read, the DATA_LEFT field will be equal to zero:&#160;the last condition checks this, and when this happens, it will return to idle state.</td>
                </tr>
            </tbody>
        </table>
        <h5>Communication  settings</h5>&#160;<p style="font-style: normal;">Communication is configured using the structure <i>COM_Cfg</i>, which writes the parameters on call of COM_CTRL&#160;function block. It must declare the following data:</p><ul><li style="font-style: normal;">Channel (<i>COM_Ch</i>)</li><li style="font-style: normal;">Speed (<i>COM_Speed</i>)</li><li style="font-style: normal;">Bits (<i>COM_Bits</i>)</li><li style="font-style: normal;">Parity (<i>COM_Parity</i>)</li><li style="font-style: normal;">Stop Bit (<i>COM_StopBit</i>)</li></ul><p style="font-style: normal;">The address is part of the message, therefore it is an independent pin.</p><h5>Inputs</h5><p class="InnerTitle">Block pin list</p><table style="mc-table-style: url('../../Resources/TableStyles/03_Input_Output.css'); margin-left: 0; margin-right: auto; width: 80%; mc-table-style-original: url('../../Resources/TableStyles/03_Input_Output.css');" class="TableStyle-03_Input_Output" cellspacing="0"><col class="TableStyle-03_Input_Output-Column-Variable" /><col class="TableStyle-03_Input_Output-Column-Type" style="width: 90px;" /><col class="TableStyle-03_Input_Output-Column-UM" /><thead><tr class="TableStyle-03_Input_Output-Head-Header1"><th class="TableStyle-03_Input_Output-HeadE-Variable-Header1">Variable</th><th class="TableStyle-03_Input_Output-HeadE-Type-Header1">Data types</th><th class="TableStyle-03_Input_Output-HeadD-UM-Header1">Description</th></tr></thead><tbody><tr class="TableStyle-03_Input_Output-Body-LightRows"><td class="TableStyle-03_Input_Output-BodyE-Variable-LightRows">CfgSer</td><td class="TableStyle-03_Input_Output-BodyE-Type-LightRows">COM_Cfg</td><td class="TableStyle-03_Input_Output-BodyD-UM-LightRows">Structure of configurations for communication</td></tr><tr class="TableStyle-03_Input_Output-Body-DarkerRows"><td class="TableStyle-03_Input_Output-BodyE-Variable-DarkerRows">Addr</td><td class="TableStyle-03_Input_Output-BodyE-Type-DarkerRows">BYTE</td><td class="TableStyle-03_Input_Output-BodyD-UM-DarkerRows">Address of the recipient device, one byte long</td></tr><tr class="TableStyle-03_Input_Output-Body-LightRows"><td class="TableStyle-03_Input_Output-BodyE-Variable-LightRows">FctCod</td><td class="TableStyle-03_Input_Output-BodyE-Type-LightRows">BYTE</td><td class="TableStyle-03_Input_Output-BodyD-UM-LightRows">Function code of the message, one byte long</td></tr><tr class="TableStyle-03_Input_Output-Body-DarkerRows"><td class="TableStyle-03_Input_Output-BodyE-Variable-DarkerRows">Data</td><td class="TableStyle-03_Input_Output-BodyE-Type-DarkerRows">Lst_Byte</td><td class="TableStyle-03_Input_Output-BodyD-UM-DarkerRows">Data stream to be sent, can be up to 252 bytes long</td></tr><tr class="TableStyle-03_Input_Output-Body-LightRows"><td class="TableStyle-03_Input_Output-BodyB-Variable-LightRows">En_Write</td><td class="TableStyle-03_Input_Output-BodyB-Type-LightRows">BOOL</td><td class="TableStyle-03_Input_Output-BodyA-UM-LightRows">Enable the message to be sent</td></tr></tbody></table><h5>Outputs</h5><p class="InnerTitle">Block pin list</p><table style="margin-left: 0; margin-right: auto; width: 80%; mc-table-style: url('../../Resources/TableStyles/03_Input_Output.css'); mc-table-style-original: url('../../Resources/TableStyles/03_Input_Output.css');" class="TableStyle-03_Input_Output" cellspacing="0"><col class="TableStyle-03_Input_Output-Column-Variable" /><col class="TableStyle-03_Input_Output-Column-Type" /><col class="TableStyle-03_Input_Output-Column-UM" /><thead><tr class="TableStyle-03_Input_Output-Head-Header1"><th class="TableStyle-03_Input_Output-HeadE-Variable-Header1">Variable</th><th class="TableStyle-03_Input_Output-HeadE-Type-Header1">Data types</th><th class="TableStyle-03_Input_Output-HeadD-UM-Header1">Description</th></tr></thead><tbody><tr class="TableStyle-03_Input_Output-Body-LightRows"><td class="TableStyle-03_Input_Output-BodyE-Variable-LightRows"><p>DataAnswer</p></td><td class="TableStyle-03_Input_Output-BodyE-Type-LightRows">Lst_Byte</td><td class="TableStyle-03_Input_Output-BodyD-UM-LightRows">Stream of bytes of the response read via the serial channel</td></tr><tr class="TableStyle-03_Input_Output-Body-DarkerRows"><td class="TableStyle-03_Input_Output-BodyE-Variable-DarkerRows">WriteData</td><td class="TableStyle-03_Input_Output-BodyE-Type-DarkerRows">Lst_Byte</td><td class="TableStyle-03_Input_Output-BodyD-UM-DarkerRows">Full data stream that has been sent over the serial channel</td></tr><tr class="TableStyle-03_Input_Output-Body-LightRows"><td class="TableStyle-03_Input_Output-BodyB-Variable-LightRows">Exception</td><td class="TableStyle-03_Input_Output-BodyB-Type-LightRows">USINT</td><td class="TableStyle-03_Input_Output-BodyA-UM-LightRows">Error code (0=No error, 1=Serial error, 2=PDU&#160;too long, 3=Response timeout, 4=Illegal CRC)</td></tr></tbody></table>&#160;<h5 style="mc-locked: locked;">Release notes</h5><p style="mc-locked: locked;">Following are notes on this function/function block released versions:</p><table class="TableStyle-04_Release_Notes" style="mc-table-style: url('../../Resources/TableStyles/04_Release_Notes.css'); width: 80%; margin-left: 0; margin-right: auto; mc-table-style-original: url('../../Resources/TableStyles/04_Release_Notes.css');" cellspacing="0"><col class="TableStyle-04_Release_Notes-Column-Release" /><col class="TableStyle-04_Release_Notes-Column-Dependecies" /><col class="TableStyle-04_Release_Notes-Column-Notes" /><thead><tr class="TableStyle-04_Release_Notes-Head-Header1"><th class="TableStyle-04_Release_Notes-HeadE-Release-Header1" style="mc-locked: locked;">Release</th><th class="TableStyle-04_Release_Notes-HeadE-Dependecies-Header1" style="mc-locked: locked;">Dependencies</th><th class="TableStyle-04_Release_Notes-HeadD-Notes-Header1" style="mc-locked: locked;">Notes</th></tr></thead><tbody><tr class="TableStyle-04_Release_Notes-Body-LightRows"><td class="TableStyle-04_Release_Notes-BodyB-Release-LightRows">1.0.0</td><td class="TableStyle-04_Release_Notes-BodyB-Dependecies-LightRows"><p>• CAREL_BASIC_LIB_1.2.0</p></td><td class="TableStyle-04_Release_Notes-BodyA-Notes-LightRows"><p>• First official release</p><p><b style="mc-locked: locked;">Fixed</b></p><p>-</p><b style="mc-locked: locked;">Changed</b><p>-</p><b style="mc-locked: locked;">Deprecated</b><p>-</p><b style="mc-locked: locked;">Enhanced</b><p class="p_1">-</p><p class="p_1" style="mc-locked: locked;"><b>Documentation</b></p><p class="p_1" style="mc-locked: unlocked;">-</p></td></tr></tbody></table><p>&#160;</p></body>
</html>